{"version":3,"sources":["Components/BoxLogic.js","Components/GameLogic.js","Components/Rules.js","Components/About.js","App.js","serviceWorker.js","index.js"],"names":["BoxLogic","this","props","x","y","className","style","left","top","width","BOX_SIZE","height","Component","GameLogic","state","myGame","alive","speed","nextGeneration","startGame","setState","runIteration","pauseGame","timeOutHandler","window","clearTimeout","handleSpeed","e","target","value","selectBox","elemOffset","getElementOffset","offSetX","clientX","offSetY","clientY","Math","floor","cols","rows","game","fillCells","handleClear","createEmptyGame","randomGrid","random","defaultGridOne","defaultGridTwo","defaultGridThree","grid2","Array","fill","map","HEIGHT","WIDTH","myNeighbors","directions","i","length","travel","y1","x1","console","log","newGame","neighbors","setTimeout","push","rect","gameRef","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","margin","backgroundSize","onClick","ref","n","box","key","onChange","placeholder","Rules","textAlign","to","About","fontWeight","App","display","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3234fd32.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst BOX_SIZE = 20;\n\nclass BoxLogic extends Component {\n\n    render() {\n        const { x, y } = this.props;\n        return (\n            <div className=\"Cell\" \n                style={{ \n                    left: `${BOX_SIZE * x + 1}px`, \n                    top: `${BOX_SIZE * y + 1}px`,\n                    width: `${BOX_SIZE - 1}px`,\n                    height: `${BOX_SIZE - 1}px`}}\n            />\n        );\n    }\n}\n\nexport default BoxLogic;","import React, { Component } from 'react';\nimport BoxLogic from './BoxLogic';\n\nconst BOX_SIZE = 20;\nconst WIDTH = 600;\nconst HEIGHT = 500;\n\nclass GameLogic extends Component {\n    constructor() {\n        super();\n        this.rows = HEIGHT / BOX_SIZE;\n        this.cols = WIDTH / BOX_SIZE;\n        this.game = this.createEmptyGame();\n    }\n\n    state = { \n        myGame: [],\n        alive: false,\n        speed: 100,\n        nextGeneration: 0,\n    }\n\n    // startGame will toggle on(dead) or off(alive)\n    startGame = () => {\n        this.setState({\n            alive: true\n        });\n        this.runIteration();\n    }\n\n    // this will toggle on/off\n    pauseGame = () => {\n        this.setState({\n            alive: false\n        });\n        if (this.timeOutHandler) {\n            window.clearTimeout(this.timeOutHandler);\n            this.timeOutHandler = null;\n        }\n    }\n\n    // check directions/cells next to selected cell\n    neighbors(game, x, y) {\n        let myNeighbors = 0;\n        const directions = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\n        for (let i = 0; i < directions.length; i++) {\n            const travel = directions[i];\n            let y1 = y + travel[0];\n            let x1 = x + travel[1];\n\n            if (x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && game[y1][x1]) {\n                myNeighbors++;\n            }\n        }\n        return myNeighbors;\n    }\n    runIteration() {\n        console.log('running iteration');\n        let newGame = this.createEmptyGame();\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                let neighbors = this.neighbors(this.game, x, y);\n                if (this.game[y][x]) {\n                    if (neighbors === 2 || neighbors === 3) {\n                        newGame[y][x] = true;\n                    } else {\n                        newGame[y][x] = false;\n                    }\n                } else {\n                    if (!this.game[y][x] && neighbors === 3) {\n                        newGame[y][x] = true;\n                    }\n                }\n            }\n        }\n        this.game = newGame;\n        this.setState({ \n            myGame: this.fillCells(),\n            nextGeneration: this.state.nextGeneration + 1 // this will update the next generation while the game is running\n        });\n        this.timeOutHandler = window.setTimeout(() => {\n            this.runIteration();\n        }, this.state.speed);\n    }\n\n    // can change and control the speed of the input \n    handleSpeed = e => {\n        this.setState({\n            speed: e.target.value\n        });\n    }\n\n    // Creates an empty game\n    createEmptyGame() {\n        let game = [];\n        for (let y = 0; y < this.rows; y++) {\n            game[y] = [];\n\n            for (let x = 0; x < this.cols; x++) {\n                game[y][x] = false;\n            }\n        }\n        return game;\n    }\n\n    // Creates Cells to fill out the board\n    fillCells() {\n        let myGame = [];\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                if (this.game[y][x]){\n                    myGame.push({ x, y });\n                }\n            }\n        }\n        return myGame; \n    } \n    \n    // Element offSet - this will calculate the position of the board element\n    getElementOffset() {\n        const rect = this.gameRef.getBoundingClientRect();\n        const doc = document.documentElement;\n\n        return {\n            x: (rect.left + window.pageXOffset) - doc.clientLeft,\n            y: (rect.top + window.pageYOffset) - doc.clientTop\n        };\n    }\n    // onClick to select boxes\n    selectBox = e => {\n        const elemOffset = this.getElementOffset();\n        const offSetX = e.clientX - elemOffset.x;\n        const offSetY = e.clientY - elemOffset.y;\n\n        const x = Math.floor(offSetX / BOX_SIZE);\n        const y = Math.floor(offSetY / BOX_SIZE);\n\n        if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows){\n            this.game[y][x] = !this.game[y][x];\n        }\n        this.setState({\n            myGame: this.fillCells()\n        });\n    }\n    // Clears the game board and all data from the cells. \n    handleClear = () => {\n        this.game = this.createEmptyGame();\n        this.setState({\n            myGame: this.fillCells(),\n            nextGeneration: 0\n        });\n    }\n    // Picks random cells across the board each time \n    randomGrid = () => {\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                this.game[y][x] = (Math.random() >= 0.5);\n            }\n        }\n        this.setState({ \n            myGame: this.fillCells(),\n            speed: 100\n        });\n    }\n    // Selects less cells and speed set to a default of 50 msec/can be changed in the input\n    defaultGridOne = () => {\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                this.game[y][x] = Math.floor(Math.random() >= 0.7);\n            }\n        }\n        this.setState({ \n            myGame: this.fillCells(),\n            speed: 50\n        });\n    }\n    // Selects less cells and speed set to a default of 150 msec/can be changed in the input\n    defaultGridTwo = () => {\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                this.game[y][x] = Math.floor(Math.random() >= 0.9);\n            }\n        }\n        this.setState({ \n            myGame: this.fillCells(),\n            speed: 150\n        });\n    }\n    // Selects cells speed and sets to a default of 200 msec/can be changed in the input\n    defaultGridThree = () => {\n        let grid2 = Array(this.rows).fill().map(() => Array(this.cols).fill(false))\n        for (let y = 0; y < this.rows; y++) {\n            for (let x = 0; x < this.cols; x++) {\n                if (Math.floor(Math.random() * 2 === 1)) {\n                    grid2[y][x] = true;\n                }\n            }\n        }\n        this.setState({ \n            myGame: this.fillCells(),\n            speed: 200\n        });\n    }\n\n    render() {\n        const { myGame, alive } = this.state;\n        return(\n            <div className=\"GameBoard\" style={{ margin: '0 15px'}}>\n                <div \n                    className=\"Board\" \n                    style={{ width: WIDTH, height: HEIGHT, backgroundSize: `${BOX_SIZE}px ${BOX_SIZE}px`}} \n                    onClick={this.selectBox}\n                    ref={(n) => {this.gameRef = n; }}>\n                        {myGame.map(box => (\n                            <BoxLogic\n                                x={box.x} \n                                y={box.y} \n                                key={`${box.x},${box.y}`} />\n                            ))}\n                </div>\n                    <h3>Generation Count: {this.state.nextGeneration}</h3>\n                <div className=\"controls\">\n                    Input Speed: \n                    <input \n                        className=\"input\"\n                        value={this.state.speed} \n                        onChange={this.handleSpeed} \n                        placeholder=\"msec\"\n                        /> msec \n                    <div className=\"button-container\"> {alive ? \n                        <button className=\"button\" onClick={this.pauseGame}>Pause Game</button> : <button className=\"button\" onClick={this.startGame}>Start Game</button>}\n                        <button className=\"button\" onClick={this.randomGrid}>Select Random</button>\n                        <button className=\"button\" onClick={this.defaultGridOne}>Default One</button>\n                        <button className=\"button\" onClick={this.defaultGridTwo}>Default Two</button>\n                        <button className=\"button\" onClick={this.handleClear}>Clear Game</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default GameLogic;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport default function Rules() {\n\n    return(\n        <div className=\"rules-container\" style={{ textAlign: 'center'}}>\n            <div className=\"inner\">\n                <h1 className=\"rules-title\">Rules: </h1>\n                    <div className=\"rules\" >\n                        1. Any live cell with fewer than two live neighbors dies, as if by underpopulation. \n                            <br /> <br />\n                        2. Any live cell with two or three live neighbors lives on to the next generation.\n                            <br /> <br />\n                        3. Any live cell with more than three live neighbors dies, as if by overpopulation.\n                            <br /> <br />\n                        4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n                    </div>\n                <div className=\"about-link\">\n                    <NavLink to='/about'>Click here to read more!</NavLink>\n                </div>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport default function About() {\n\n    return (\n        <div className=\"about\">\n            <h2 className=\"about-title\">About this Algorithm: </h2>\n                <p className=\"about-conway\">\n                    Conway's Game of Life was first developed by a British mathematican, John Conway, in 1970. \n                        <br />\n                    The game consists of being in either two states, alive(on) or dead(off). The patterns on the game evolve over time as the cells move across the grid, making this a \"zero-player\" game and Turing complete. There is a set of rules that the game follows, (which are listed next to the game). <br />\n                    Those rules were chosen to satisfy the following criteria...\n                    <div className=\"about-rules\">\n                        <h4 style={{ fontWeight:'600'}}>Birth:</h4>\n                            - Every empty cell that is adjacent to exactly three live neighbors becomes a birth/live cell.<hr />\n                        <h4 style={{ fontWeight:'600'}}>Death: </h4>\n                            - Each cell with four or more neighbors will die. Also, each cell with only one neighbor or none, will die from isolation.<hr/>\n                        <h4 style={{ fontWeight:'600'}}>Survival: </h4>\n                            - Any live cell/counter with two or three live neighbors survives to move to the next generation.<hr/>\n                        <h4 style={{ fontWeight:'600'}}>Side Note:</h4> \n                            - All other live cells die in the next generation. Similarly, all other dead cells stay dead.<hr/>\n                    </div>\n                </p>\n                <p className=\"about-conway\">\n                    This has been a fun and interesting project to dive into and explore more into the algorithms and patterns. \n                        <br />\n                     Hope you enjoyed playing.\n                        < br />\n                        < br />\n                    Thank you for taking the time to check out my implemention of \n                        < br />\n                    Conway's Game of Life!\n                </p>\n            <div className=\"game-link\">\n                <NavLink to='/'>Back to Game</NavLink> \n            </div>\n        </div>\n    );\n}\n\n\n","import React from 'react';\nimport './App.css';\nimport GameLogic from './Components/GameLogic.js';\nimport Rules from './Components/Rules.js';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport About from './Components/About.js';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <h1 className=\"title\">Conway's - Game of Life</h1> \n          <div style={{ display: 'flex' }}>\n            <Route exact path='/' component={GameLogic} />\n            <Route exact path='/' component={Rules} />\n          </div>\n          <Route path='/about' component={About} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}